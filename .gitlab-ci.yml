# GitLab CI pipeline for Chaos Mesh Argo Rollouts Plugin
stages:
  - test
  - build
  - publish-storage

variables:
  GO_VERSION: "1.21"
  BINARY_NAME: "chaos-mesh-plugin"
  VERSION: "${CI_COMMIT_TAG:-v0.1.0-${CI_COMMIT_SHORT_SHA}}"

# Test job
test:
  stage: test
  image: golang:1.21
  before_script:
    - go mod tidy
    - go mod download
    - go mod verify
  script:
    # Run tests
    - go test -v ./...
    # Run tests with coverage
    - go test -v -coverprofile=coverage.out ./...
    - go tool cover -func=coverage.out
  coverage: '/total:\s+\(statements\)\s+(\d+\.\d+)%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.out
      - coverage.html
    expire_in: 1 week
  only:
    - main
    - develop
    - merge_requests
    - tags

# Build job for single platform (Linux AMD64)
build:
  stage: build
  image: golang:1.21
  before_script:
    - go mod tidy
    - go mod download
    - go mod verify
  script:
    # Build the binary with version info
    - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X main.version=${VERSION}" -o ${BINARY_NAME} .
    - ls -la ${BINARY_NAME}
    # Make it executable
    - chmod +x ${BINARY_NAME}
    # Generate checksum
    - sha256sum ${BINARY_NAME} > ${BINARY_NAME}.sha256
    # Final verification
    - ls -la ${BINARY_NAME}*
    - echo "Built version: ${VERSION}"
  artifacts:
    name: "${BINARY_NAME}-linux-amd64-${VERSION}"
    paths:
      - ${BINARY_NAME}
      - ${BINARY_NAME}.sha256
    expire_in: 1 week
  only:
    - main
    - develop
    - merge_requests
    - tags

# Build job for multiple platforms (only on tags)
build-multiarch:
  stage: build
  image: golang:1.21
  before_script:
    - go mod tidy
    - go mod download
    - go mod verify
  script:
    # Create build directory
    - mkdir -p dist
    # Build for Linux AMD64
    - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X main.version=${VERSION}" -o dist/${BINARY_NAME}-linux-amd64 .
    # Build for Linux ARM64
    - CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -ldflags="-s -w -X main.version=${VERSION}" -o dist/${BINARY_NAME}-linux-arm64 .
    # Build for macOS AMD64
    - CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w -X main.version=${VERSION}" -o dist/${BINARY_NAME}-darwin-amd64 .
    # Build for macOS ARM64
    - CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w -X main.version=${VERSION}" -o dist/${BINARY_NAME}-darwin-arm64 .
    # Build for Windows AMD64
    - CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -ldflags="-s -w -X main.version=${VERSION}" -o dist/${BINARY_NAME}-windows-amd64.exe .
    # Generate checksums
    - cd dist && for file in *; do sha256sum "$file" > "$file.sha256"; done
    # List all artifacts
    - ls -la dist/
  artifacts:
    name: "${BINARY_NAME}-multiarch-${VERSION}"
    paths:
      - dist/
    expire_in: 4 weeks
  only:
    - tags

# Publish to Google Cloud Storage
publish-storage:
  stage: publish-storage
  image: google/cloud-sdk:alpine
  dependencies:
    - build
  script:
    # Upload main binary
    - gsutil cp ${BINARY_NAME} gs://argo-rollouts-plugin-hml/${BINARY_NAME}
    # Upload with version
    - gsutil cp ${BINARY_NAME} gs://argo-rollouts-plugin-hml/${BINARY_NAME}-${VERSION}
    # Upload checksum
    - gsutil cp ${BINARY_NAME}.sha256 gs://argo-rollouts-plugin-hml/${BINARY_NAME}-${VERSION}.sha256
    # Set public read access (optional)
    - gsutil acl ch -u AllUsers:R gs://argo-rollouts-plugin-hml/${BINARY_NAME}
    - gsutil acl ch -u AllUsers:R gs://argo-rollouts-plugin-hml/${BINARY_NAME}-${VERSION}
  only:
    - main
    - tags

# Publish multiarch release (only on tags)
publish-release:
  stage: publish-storage
  image: google/cloud-sdk:alpine
  dependencies:
    - build-multiarch
  script:
    # Upload all multiarch binaries
    - gsutil -m cp dist/* gs://argo-rollouts-plugin-hml/releases/${VERSION}/
    # Set public read access
    - gsutil -m acl ch -u AllUsers:R gs://argo-rollouts-plugin-hml/releases/${VERSION}/*
    # Create latest symlinks for main platforms
    - gsutil cp dist/${BINARY_NAME}-linux-amd64 gs://argo-rollouts-plugin-hml/${BINARY_NAME}-latest
    - gsutil acl ch -u AllUsers:R gs://argo-rollouts-plugin-hml/${BINARY_NAME}-latest
  only:
    - tags